// Mocks generated by Mockito 5.4.4 from annotations
// in client/test/helpers/test_helpers.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:client/core/failure/failure.dart' as _i5;
import 'package:client/features/genre_list/data/data_source/local/genre_local_datasource_impl.dart'
    as _i7;
import 'package:client/features/genre_list/data/data_source/remote/genre_remote_datasource_impl.dart'
    as _i8;
import 'package:client/features/genre_list/domain/entity/genre_entity.dart'
    as _i6;
import 'package:client/features/genre_list/domain/repositories/genre_repository_impl.dart'
    as _i3;
import 'package:dartz/dartz.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [GenreRepositoryImpl].
///
/// See the documentation for Mockito's code generation for more information.
class MockGenreRepositoryImpl extends _i1.Mock
    implements _i3.GenreRepositoryImpl {
  MockGenreRepositoryImpl() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i5.Failure, void>> clearGenreList() =>
      (super.noSuchMethod(
        Invocation.method(
          #clearGenreList,
          [],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, void>>.value(
            _FakeEither_0<_i5.Failure, void>(
          this,
          Invocation.method(
            #clearGenreList,
            [],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, void>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, List<_i6.GenreEntity>>> getGenreList() =>
      (super.noSuchMethod(
        Invocation.method(
          #getGenreList,
          [],
        ),
        returnValue:
            _i4.Future<_i2.Either<_i5.Failure, List<_i6.GenreEntity>>>.value(
                _FakeEither_0<_i5.Failure, List<_i6.GenreEntity>>(
          this,
          Invocation.method(
            #getGenreList,
            [],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, List<_i6.GenreEntity>>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, List<_i6.GenreEntity>>> getGenreListByIds(
          List<int>? idsGenre) =>
      (super.noSuchMethod(
        Invocation.method(
          #getGenreListByIds,
          [idsGenre],
        ),
        returnValue:
            _i4.Future<_i2.Either<_i5.Failure, List<_i6.GenreEntity>>>.value(
                _FakeEither_0<_i5.Failure, List<_i6.GenreEntity>>(
          this,
          Invocation.method(
            #getGenreListByIds,
            [idsGenre],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, List<_i6.GenreEntity>>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, void>> saveGenreList(
          {required List<_i6.GenreEntity>? genres}) =>
      (super.noSuchMethod(
        Invocation.method(
          #saveGenreList,
          [],
          {#genres: genres},
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, void>>.value(
            _FakeEither_0<_i5.Failure, void>(
          this,
          Invocation.method(
            #saveGenreList,
            [],
            {#genres: genres},
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, void>>);

  @override
  _i2.Either<_i5.Failure, List<_i6.GenreEntity>> getSavedGenreList() =>
      (super.noSuchMethod(
        Invocation.method(
          #getSavedGenreList,
          [],
        ),
        returnValue: _FakeEither_0<_i5.Failure, List<_i6.GenreEntity>>(
          this,
          Invocation.method(
            #getSavedGenreList,
            [],
          ),
        ),
      ) as _i2.Either<_i5.Failure, List<_i6.GenreEntity>>);

  @override
  _i2.Either<_i5.Failure, List<_i6.GenreEntity>> getSavedGenreListByIds(
          List<int>? idsGenre) =>
      (super.noSuchMethod(
        Invocation.method(
          #getSavedGenreListByIds,
          [idsGenre],
        ),
        returnValue: _FakeEither_0<_i5.Failure, List<_i6.GenreEntity>>(
          this,
          Invocation.method(
            #getSavedGenreListByIds,
            [idsGenre],
          ),
        ),
      ) as _i2.Either<_i5.Failure, List<_i6.GenreEntity>>);
}

/// A class which mocks [GenreLocalDataSourceImpl].
///
/// See the documentation for Mockito's code generation for more information.
class MockGenreLocalDataSourceImpl extends _i1.Mock
    implements _i7.GenreLocalDataSourceImpl {
  MockGenreLocalDataSourceImpl() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<void> clearGenres() => (super.noSuchMethod(
        Invocation.method(
          #clearGenres,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  List<_i6.GenreEntity> getSavedListGenres() => (super.noSuchMethod(
        Invocation.method(
          #getSavedListGenres,
          [],
        ),
        returnValue: <_i6.GenreEntity>[],
      ) as List<_i6.GenreEntity>);

  @override
  bool isSavedGenres() => (super.noSuchMethod(
        Invocation.method(
          #isSavedGenres,
          [],
        ),
        returnValue: false,
      ) as bool);

  @override
  _i4.Future<void> saveGenres({required List<_i6.GenreEntity>? genres}) =>
      (super.noSuchMethod(
        Invocation.method(
          #saveGenres,
          [],
          {#genres: genres},
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  List<_i6.GenreEntity> getGenreListByIds(List<int>? idsGenre) =>
      (super.noSuchMethod(
        Invocation.method(
          #getGenreListByIds,
          [idsGenre],
        ),
        returnValue: <_i6.GenreEntity>[],
      ) as List<_i6.GenreEntity>);
}

/// A class which mocks [GenreRemoteDataSourceImpl].
///
/// See the documentation for Mockito's code generation for more information.
class MockGenreRemoteDataSourceImpl extends _i1.Mock
    implements _i8.GenreRemoteDataSourceImpl {
  MockGenreRemoteDataSourceImpl() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<List<_i6.GenreEntity>> getGenreList() => (super.noSuchMethod(
        Invocation.method(
          #getGenreList,
          [],
        ),
        returnValue:
            _i4.Future<List<_i6.GenreEntity>>.value(<_i6.GenreEntity>[]),
      ) as _i4.Future<List<_i6.GenreEntity>>);

  @override
  _i4.Future<List<_i6.GenreEntity>> getGenreListByIds(List<int>? idsGenre) =>
      (super.noSuchMethod(
        Invocation.method(
          #getGenreListByIds,
          [idsGenre],
        ),
        returnValue:
            _i4.Future<List<_i6.GenreEntity>>.value(<_i6.GenreEntity>[]),
      ) as _i4.Future<List<_i6.GenreEntity>>);
}
